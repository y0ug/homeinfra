---
defaultPodOptions:
  hostname: ztnet
controllers:
  main:
    strategy: Recreate
    replicas: 1
    containers:
      ztnet:
        image:
          repository: sinamics/ztnet
          pullPolicy: IfNotPresent
          tag: latest
        env:
          - name: NEXTAUTH_URL
            value: "https://ztnet.int.mazenet.org"
          - name: NEXTAUTH_URL_INTERNAL
            value: "http://ztnet:3000"
          - name: NEXTAUTH_SECRET
            value: {{.Values.ztnetNextAuthSecret}} 
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-cluster-app
                key: username
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-cluster-app
                key: password
          - name: POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-cluster-app
                key: host
          - name: POSTGRES_PORT
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-cluster-app
                key: port
          - name: POSTGRES_DB
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-cluster-app
                key: dbname

        envFrom:
          - secret: {{.Release.Name}}-oauth2 

      zerotier:
        image:
          repository: zyclonite/zerotier 
          pullPolicy: IfNotPresent
          tag: latest
        securityContext:
          capabilities:
            add:
              - NET_ADMIN
              - SYS_ADMIN

service:
  main:
    ipFamilyPolicy: PreferDualStack
    ipFamilies:
     - IPv6
     - IPv4
    controller: main
    ports:
      http:
        port: 3000 
        protocol: HTTP
  zerotier:
    controller: main
    type: LoadBalancer
    ipFamilyPolicy: RequireDualStack
    ports:
      ztnet:
        port: 9993
        protocol: UDP

ingress:
  main:
    enabled: true
    className: nginx
    annotations:
      cert-manager.io/cluster-issuer: {{ .Values.default_issuer }}
      gethomepage.dev/enabled: "true"
      gethomepage.dev/description: Zerotier management 
      gethomepage.dev/group: Admin 
      gethomepage.dev/icon: zerotier.png
      gethomepage.dev/name: ztnet 
    hosts:
      - host: &host "ztnet.{{ .Values.domain }}"
        paths:
          - path: /
            service:
              identifier: main
    tls:
      - secretName: ztnet-tls
        hosts:
          - *host

persistence:
  zerotier:
    enabled: true
    type: persistentVolumeClaim
    accessMode: ReadWriteOnce
    size: 1Gi
    # advancedMounts:
    #   main:
    #     zerotier:
    globalMounts:
        - path: /var/lib/zerotier-one
  tun:
    enabled: true
    type: hostPath #CharDevice
    hostPath: /dev/net/tun
    advancedMounts:
      main:
        zerotier:
          - path: /dev/net/tun 

rawResources:
  oauth2-secret:
    apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    spec:
      spec:
        refreshInterval: 60s 
        secretStoreRef:
          kind: ClusterSecretStore
          name: external-secrets-secret-store-scw
        target:
          name: {{.Release.Name}}-oauth2 
          creationPolicy: Owner
        dataFrom:
          - extract:
              key: path:/k8s/prod/apps/ztnet

  rclone-secret:
    apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    spec:
      spec:
        refreshInterval: 60s
        secretStoreRef:
          kind: ClusterSecretStore
          name: external-secrets-secret-store-scw
        target:
          name: rclone-secret
          creationPolicy: Owner
        dataFrom:
          - extract:
              key: path:/k8s/prod/core/volsync-rclone
              version: latest_enabled

  cnpg-backup-secret:
    apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    spec:
      spec:
        refreshInterval: 60s
        secretStoreRef:
          kind: ClusterSecretStore
          name: external-secrets-secret-store-scw
        target:
          name: cnpg-backup
          creationPolicy: Owner
        dataFrom:
          - extract:
              key: path:/k8s/prod/core/cnpg-backup
              version: latest_enabled


  config-source:
    apiVersion: volsync.backube/v1alpha1
    kind: ReplicationSource
    spec:
      spec:
        sourcePVC: {{.Release.Name }}-zerotier
        trigger:
          schedule: "8 * * * *"
        rclone:
          rcloneConfigSection: "rclone-bucket"
          rcloneDestPath: "mazenet-volsync-backup-4/{{.Release.Name}}-config"
          rcloneConfig: "rclone-secret"
          copyMethod: Snapshot

    # config-dest:
    #   apiVersion: volsync.backube/v1alpha1
    #   kind: ReplicationDestination
    #   spec:
    #     spec:
    #       trigger:
    #         manual: restore-backup-2
    #       rclone:
    #         rcloneConfigSection: "rclone-bucket"
    #         rcloneDestPath: "mazenet-volsync-backup-4/{{.Release.Name}}-config"
    #         rcloneConfig: "rclone-secret"
    #         copyMethod: Snapshot
    #         accessModes: [ReadWriteOnce]
    #         capacity: 1Gi

cluster:
  # type: postgresql
  # mode: recovery

  cluster:
    instances: 1
    initdb:
      owner: {{.Release.Name}} 
      database: {{.Release.Name}} 
    monitoring:
      customQueries: []
      disableDefaultQueries: true
      enabled: false
    storage:
      size: 8Gi

  backups:
    enabled: true
    schedule: "0 * * * * *" 
    retentionPolicy: "7d" 

    destinationPath: "s3://mazenet-cnpg-backup/{{.Release.Name}}"
    endpointURL: "https://s3.fr-par.scw.cloud"
    secret:
      create: false
      name: "cnpg-backup"

  # recovery:
  #   cluster-name: database-cluster
  #   destinationPath: "s3://mazenet-cnpg-backup/{{.Release.Name}}"
  #   endpointURL: "https://s3.fr-par.scw.cloud"
  #   secret:
  #     create: false
  #     name: "cnpg-backup"
